/* tslint:disable */
/* eslint-disable */
/**
 * Patient Management API
 * API for managing patient profiles
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Patient,
    PatientFromJSON,
    PatientToJSON,
    PatientInput,
    PatientInputFromJSON,
    PatientInputToJSON,
} from '../models';

export interface CreatePatientRequest {
    PatientInput: PatientInput;
}

export interface DeletePatientRequest {
    id: string;
}

export interface GetPatientByIdRequest {
    id: string;
}

export interface UpdatePatientRequest {
    id: string;
    PatientInput: PatientInput;
}

/**
 * 
 */
export class PatientsApi extends runtime.BaseAPI {

    /**
     * Create a new patient profile
     */
    async createPatientRaw(requestParameters: CreatePatientRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.PatientInput === null || requestParameters.PatientInput === undefined) {
            throw new runtime.RequiredError('PatientInput','Required parameter requestParameters.PatientInput was null or undefined when calling createPatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PatientInputToJSON(requestParameters.PatientInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * Create a new patient profile
     */
    async createPatient(PatientInput: PatientInput, initOverrides?: RequestInit): Promise<Patient> {
        const response = await this.createPatientRaw({ PatientInput: PatientInput }, initOverrides);
        return await response.value();
    }

    /**
     * Delete a patient profile
     */
    async deletePatientRaw(requestParameters: DeletePatientRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling deletePatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a patient profile
     */
    async deletePatient(id: string, initOverrides?: RequestInit): Promise<void> {
        await this.deletePatientRaw({ id: id }, initOverrides);
    }

    /**
     * Get a specific patient by ID
     */
    async getPatientByIdRaw(requestParameters: GetPatientByIdRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getPatientById.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * Get a specific patient by ID
     */
    async getPatientById(id: string, initOverrides?: RequestInit): Promise<Patient> {
        const response = await this.getPatientByIdRaw({ id: id }, initOverrides);
        return await response.value();
    }

    /**
     * Get all patients
     */
    async getPatientsRaw(initOverrides?: RequestInit): Promise<runtime.ApiResponse<Array<Patient>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/patients`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(PatientFromJSON));
    }

    /**
     * Get all patients
     */
    async getPatients(initOverrides?: RequestInit): Promise<Array<Patient>> {
        const response = await this.getPatientsRaw(initOverrides);
        return await response.value();
    }

    /**
     * Update a patient profile
     */
    async updatePatientRaw(requestParameters: UpdatePatientRequest, initOverrides?: RequestInit): Promise<runtime.ApiResponse<Patient>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling updatePatient.');
        }

        if (requestParameters.PatientInput === null || requestParameters.PatientInput === undefined) {
            throw new runtime.RequiredError('PatientInput','Required parameter requestParameters.PatientInput was null or undefined when calling updatePatient.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/patients/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PatientInputToJSON(requestParameters.PatientInput),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PatientFromJSON(jsonValue));
    }

    /**
     * Update a patient profile
     */
    async updatePatient(id: string, PatientInput: PatientInput, initOverrides?: RequestInit): Promise<Patient> {
        const response = await this.updatePatientRaw({ id: id, PatientInput: PatientInput }, initOverrides);
        return await response.value();
    }

}
